{"ast":null,"code":"import { SELECT_TILE, RESET_GAME } from './actions';\n\n// Функция для создания плиток с парными числами от 1 до 8\nconst createTiles = () => {\n  // Создаем массив парных чисел от 1 до 8\n  const numbers = Array.from({\n    length: 8\n  }, (_, index) => index + 1); // [1, 2, 3, 4, 5, 6, 7, 8]\n\n  // Удваиваем массив для пар\n  const tiles = [...numbers, ...numbers].map((number, index) => ({\n    id: index,\n    isOpen: false,\n    number: number // Используем число как идентификатор для пар\n  }));\n  console.log('Созданные плитки:', tiles);\n\n  // Перемешиваем массив плиток\n  return tiles.sort(() => Math.random() - 0.5);\n};\nconst initialState = {\n  tiles: createTiles(),\n  // Используем функцию для создания плиток\n  firstSelected: null,\n  secondSelected: null\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_TILE:\n      {\n        const selectedTile = state.tiles.find(tile => tile.id === action.payload);\n        console.log('Выбранная плитка:', selectedTile);\n        if (!state.firstSelected) {\n          return {\n            ...state,\n            firstSelected: selectedTile,\n            tiles: state.tiles.map(tile => tile.id === selectedTile.id ? {\n              ...tile,\n              isOpen: true\n            } : tile)\n          };\n        } else if (!state.secondSelected && state.firstSelected.id !== selectedTile.id) {\n          return {\n            ...state,\n            secondSelected: selectedTile,\n            tiles: state.tiles.map(tile => tile.id === selectedTile.id ? {\n              ...tile,\n              isOpen: true\n            } : tile)\n          };\n        }\n\n        // Проверяем, выбраны ли обе плитки\n        if (state.firstSelected && state.secondSelected) {\n          const firstNumber = Number(state.firstSelected.number);\n          const secondNumber = Number(state.secondSelected.number);\n          const isMatch = firstNumber === secondNumber;\n\n          // Логируем значения перед сравнением\n          console.log(`Первый: ${firstNumber}, Второй: ${secondNumber}, Совпадение: ${isMatch}`);\n          const updatedTiles = state.tiles.map(tile => {\n            if (tile.id === state.firstSelected.id || tile.id === state.secondSelected.id) {\n              return isMatch ? {\n                ...tile,\n                isOpen: true\n              } : {\n                ...tile,\n                isOpen: false\n              };\n            }\n            return tile;\n          });\n          return {\n            ...state,\n            tiles: updatedTiles,\n            firstSelected: null,\n            // Очищаем, чтобы можно было выбрать новую пару\n            secondSelected: null\n          };\n        }\n        return state; // Возвращаем текущее состояние, если ничего не изменилось\n      }\n    case RESET_GAME:\n      return {\n        ...initialState,\n        tiles: createTiles() // Создаем заново перемешанные плитки\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["SELECT_TILE","RESET_GAME","createTiles","numbers","Array","from","length","_","index","tiles","map","number","id","isOpen","console","log","sort","Math","random","initialState","firstSelected","secondSelected","reducer","state","action","type","selectedTile","find","tile","payload","firstNumber","Number","secondNumber","isMatch","updatedTiles"],"sources":["/Users/sergej/pairs-game/src/redux/reducer.js"],"sourcesContent":["import { SELECT_TILE, RESET_GAME } from './actions';\n\n// Функция для создания плиток с парными числами от 1 до 8\nconst createTiles = () => {\n    // Создаем массив парных чисел от 1 до 8\n    const numbers = Array.from({ length: 8 }, (_, index) => index + 1); // [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    // Удваиваем массив для пар\n    const tiles = [...numbers, ...numbers].map((number, index) => ({\n        id: index,\n        isOpen: false,\n        number: number // Используем число как идентификатор для пар\n    }));\n    console.log('Созданные плитки:', tiles);\n\n    // Перемешиваем массив плиток\n    return tiles.sort(() => Math.random() - 0.5);\n};\n\nconst initialState = {\n    tiles: createTiles(), // Используем функцию для создания плиток\n    firstSelected: null,\n    secondSelected: null,\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_TILE: {\n            const selectedTile = state.tiles.find(tile => tile.id === action.payload);\n            console.log('Выбранная плитка:', selectedTile);\n\n            if (!state.firstSelected) {\n                return {\n                    ...state,\n                    firstSelected: selectedTile,\n                    tiles: state.tiles.map(tile => tile.id === selectedTile.id ? { ...tile, isOpen: true } : tile),\n                };\n            } else if (!state.secondSelected && state.firstSelected.id !== selectedTile.id) {\n                return {\n                    ...state,\n                    secondSelected: selectedTile,\n                    tiles: state.tiles.map(tile => tile.id === selectedTile.id ? { ...tile, isOpen: true } : tile),\n                };\n            }\n\n            // Проверяем, выбраны ли обе плитки\n            if (state.firstSelected && state.secondSelected) {\n                const firstNumber = Number(state.firstSelected.number);\n                const secondNumber = Number(state.secondSelected.number);\n                const isMatch = firstNumber === secondNumber;\n\n                // Логируем значения перед сравнением\n                console.log(`Первый: ${firstNumber}, Второй: ${secondNumber}, Совпадение: ${isMatch}`);\n\n                const updatedTiles = state.tiles.map(tile => {\n                    if (tile.id === state.firstSelected.id || tile.id === state.secondSelected.id) {\n                        return isMatch ? { ...tile, isOpen: true } : { ...tile, isOpen: false };\n                    }\n                    return tile;\n                });\n\n                return {\n                    ...state,\n                    tiles: updatedTiles,\n                    firstSelected: null, // Очищаем, чтобы можно было выбрать новую пару\n                    secondSelected: null,\n                };\n            }\n\n            return state; // Возвращаем текущее состояние, если ничего не изменилось\n        }\n\n        case RESET_GAME:\n            return {\n                ...initialState,\n                tiles: createTiles(), // Создаем заново перемешанные плитки\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,WAAW;;AAEnD;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACtB;EACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEpE;EACA,MAAMC,KAAK,GAAG,CAAC,GAAGN,OAAO,EAAE,GAAGA,OAAO,CAAC,CAACO,GAAG,CAAC,CAACC,MAAM,EAAEH,KAAK,MAAM;IAC3DI,EAAE,EAAEJ,KAAK;IACTK,MAAM,EAAE,KAAK;IACbF,MAAM,EAAEA,MAAM,CAAC;EACnB,CAAC,CAAC,CAAC;EACHG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,KAAK,CAAC;;EAEvC;EACA,OAAOA,KAAK,CAACO,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;AAChD,CAAC;AAED,MAAMC,YAAY,GAAG;EACjBV,KAAK,EAAEP,WAAW,CAAC,CAAC;EAAE;EACtBkB,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE;AACpB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKzB,WAAW;MAAE;QACd,MAAM0B,YAAY,GAAGH,KAAK,CAACd,KAAK,CAACkB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAChB,EAAE,KAAKY,MAAM,CAACK,OAAO,CAAC;QACzEf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEW,YAAY,CAAC;QAE9C,IAAI,CAACH,KAAK,CAACH,aAAa,EAAE;UACtB,OAAO;YACH,GAAGG,KAAK;YACRH,aAAa,EAAEM,YAAY;YAC3BjB,KAAK,EAAEc,KAAK,CAACd,KAAK,CAACC,GAAG,CAACkB,IAAI,IAAIA,IAAI,CAAChB,EAAE,KAAKc,YAAY,CAACd,EAAE,GAAG;cAAE,GAAGgB,IAAI;cAAEf,MAAM,EAAE;YAAK,CAAC,GAAGe,IAAI;UACjG,CAAC;QACL,CAAC,MAAM,IAAI,CAACL,KAAK,CAACF,cAAc,IAAIE,KAAK,CAACH,aAAa,CAACR,EAAE,KAAKc,YAAY,CAACd,EAAE,EAAE;UAC5E,OAAO;YACH,GAAGW,KAAK;YACRF,cAAc,EAAEK,YAAY;YAC5BjB,KAAK,EAAEc,KAAK,CAACd,KAAK,CAACC,GAAG,CAACkB,IAAI,IAAIA,IAAI,CAAChB,EAAE,KAAKc,YAAY,CAACd,EAAE,GAAG;cAAE,GAAGgB,IAAI;cAAEf,MAAM,EAAE;YAAK,CAAC,GAAGe,IAAI;UACjG,CAAC;QACL;;QAEA;QACA,IAAIL,KAAK,CAACH,aAAa,IAAIG,KAAK,CAACF,cAAc,EAAE;UAC7C,MAAMS,WAAW,GAAGC,MAAM,CAACR,KAAK,CAACH,aAAa,CAACT,MAAM,CAAC;UACtD,MAAMqB,YAAY,GAAGD,MAAM,CAACR,KAAK,CAACF,cAAc,CAACV,MAAM,CAAC;UACxD,MAAMsB,OAAO,GAAGH,WAAW,KAAKE,YAAY;;UAE5C;UACAlB,OAAO,CAACC,GAAG,CAAC,WAAWe,WAAW,aAAaE,YAAY,iBAAiBC,OAAO,EAAE,CAAC;UAEtF,MAAMC,YAAY,GAAGX,KAAK,CAACd,KAAK,CAACC,GAAG,CAACkB,IAAI,IAAI;YACzC,IAAIA,IAAI,CAAChB,EAAE,KAAKW,KAAK,CAACH,aAAa,CAACR,EAAE,IAAIgB,IAAI,CAAChB,EAAE,KAAKW,KAAK,CAACF,cAAc,CAACT,EAAE,EAAE;cAC3E,OAAOqB,OAAO,GAAG;gBAAE,GAAGL,IAAI;gBAAEf,MAAM,EAAE;cAAK,CAAC,GAAG;gBAAE,GAAGe,IAAI;gBAAEf,MAAM,EAAE;cAAM,CAAC;YAC3E;YACA,OAAOe,IAAI;UACf,CAAC,CAAC;UAEF,OAAO;YACH,GAAGL,KAAK;YACRd,KAAK,EAAEyB,YAAY;YACnBd,aAAa,EAAE,IAAI;YAAE;YACrBC,cAAc,EAAE;UACpB,CAAC;QACL;QAEA,OAAOE,KAAK,CAAC,CAAC;MAClB;IAEA,KAAKtB,UAAU;MACX,OAAO;QACH,GAAGkB,YAAY;QACfV,KAAK,EAAEP,WAAW,CAAC,CAAC,CAAE;MAC1B,CAAC;IAEL;MACI,OAAOqB,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}