{"ast":null,"code":"import { SELECT_TILE, RESET_GAME } from './actions';\nconst createTiles = () => {\n  // Создаем массив пар (8 уникальных цветов)\n  const colors = [...Array(8).keys()];\n\n  // Удваиваем массив для пар\n  const tiles = [...colors, ...colors].map((color, index) => ({\n    id: index,\n    isOpen: false,\n    color: color // Используем цвет как идентификатор для пар\n  }));\n\n  // Перемешиваем массив плиток\n  return tiles.sort(() => Math.random() - 0.5);\n};\nconst initialState = {\n  tiles: createTiles(),\n  // Используем функцию для создания плиток\n  firstSelected: null,\n  secondSelected: null\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_TILE:\n      const selectedTile = state.tiles.find(tile => tile.id === action.payload);\n      if (!state.firstSelected) {\n        return {\n          ...state,\n          firstSelected: selectedTile,\n          tiles: state.tiles.map(tile => tile.id === selectedTile.id ? {\n            ...tile,\n            isOpen: true\n          } : tile)\n        };\n      } else if (!state.secondSelected && state.firstSelected.id !== selectedTile.id) {\n        return {\n          ...state,\n          secondSelected: selectedTile,\n          tiles: state.tiles.map(tile => tile.id === selectedTile.id ? {\n            ...tile,\n            isOpen: true\n          } : tile)\n        };\n      }\n      if (state.firstSelected && state.secondSelected) {\n        const isMatch = state.firstSelected.color === state.secondSelected.color;\n        const updatedTiles = state.tiles.map(tile => {\n          if (tile.id === state.firstSelected.id || tile.id === state.secondSelected.id) {\n            return isMatch ? {\n              ...tile,\n              isOpen: true\n            } : {\n              ...tile,\n              isOpen: false\n            };\n          }\n          return tile;\n        });\n        return {\n          ...state,\n          tiles: updatedTiles,\n          firstSelected: isMatch ? null : state.firstSelected,\n          secondSelected: null\n        };\n      }\n      return state;\n    case RESET_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["SELECT_TILE","RESET_GAME","createTiles","colors","Array","keys","tiles","map","color","index","id","isOpen","sort","Math","random","initialState","firstSelected","secondSelected","reducer","state","action","type","selectedTile","find","tile","payload","isMatch","updatedTiles"],"sources":["/Users/sergej/pairs-game/src/redux/reducer.js"],"sourcesContent":["import { SELECT_TILE, RESET_GAME } from './actions';\n\nconst createTiles = () => {\n    // Создаем массив пар (8 уникальных цветов)\n    const colors = [...Array(8).keys()];\n    \n    // Удваиваем массив для пар\n    const tiles = [...colors, ...colors].map((color, index) => ({\n        id: index,\n        isOpen: false,\n        color: color // Используем цвет как идентификатор для пар\n    }));\n\n    // Перемешиваем массив плиток\n    return tiles.sort(() => Math.random() - 0.5);\n};\n\nconst initialState = {\n    tiles: createTiles(), // Используем функцию для создания плиток\n    firstSelected: null,\n    secondSelected: null,\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_TILE:\n            const selectedTile = state.tiles.find(tile => tile.id === action.payload);\n\n            if (!state.firstSelected) {\n                return {\n                    ...state,\n                    firstSelected: selectedTile,\n                    tiles: state.tiles.map(tile =>\n                        tile.id === selectedTile.id ? { ...tile, isOpen: true } : tile\n                    ),\n                };\n            } else if (!state.secondSelected && state.firstSelected.id !== selectedTile.id) {\n                return {\n                    ...state,\n                    secondSelected: selectedTile,\n                    tiles: state.tiles.map(tile =>\n                        tile.id === selectedTile.id ? { ...tile, isOpen: true } : tile\n                    ),\n                };\n            }\n\n            if (state.firstSelected && state.secondSelected) {\n                const isMatch = state.firstSelected.color === state.secondSelected.color;\n\n                const updatedTiles = state.tiles.map(tile => {\n                    if (tile.id === state.firstSelected.id || tile.id === state.secondSelected.id) {\n                        return isMatch ? { ...tile, isOpen: true } : { ...tile, isOpen: false };\n                    }\n                    return tile;\n                });\n\n                return {\n                    ...state,\n                    tiles: updatedTiles,\n                    firstSelected: isMatch ? null : state.firstSelected,\n                    secondSelected: null,\n                };\n            }\n\n            return state;\n\n        case RESET_GAME:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}